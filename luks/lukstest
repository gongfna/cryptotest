#!/bin/bash

LT_IMG='/tmp/bench.img'
LT_MOUNTPOINT='/mnt/lukstest'
LT_TEMPDIR='/dev/shm/'
LT_MAPPER='ctest'
LT_NUMPASS=10
LT_VERBOSE=0

print_help() {
	echo "$0 [--numpass npass][--tempdir path][--mountpoint path][--image path]"
	#echo "Default number of pass is $LT_NUMPASS"
}

while [ $# -ge 1 ]
do
	case $1 in
	-h)
		print_help
		exit 0
	;;
	-help)
		print_help
		exit 0
	;;
	--tempdir)
		shift
		LT_TEMPDIR=$1
		echo "Setting the temporary directory to $LT_NUMPASS"
		shift
	;;
	--mountpoint)
		shift
		LT_MOUNTPOINT=$1
		echo "Setting the mount point to $LT_NUMPASS"
		shift
	;;
	--image)
		shift
		LT_IMG=$1
		echo "Setting the image path to $LT_NUMPASS"
		shift
	;;
	--numpass)
		shift
		LT_NUMPASS=$1
		echo "Setting the number of pass to $LT_NUMPASS"
		shift
	;;
	--clean)
		umount $LT_MOUNTPOINT
		cryptsetup luksClose $LT_MAPPER
		exit 0
	;;
	*)
		echo "ERROR: unknown argument $1"
		exit 1
	;;
	esac
done

if [ ! -d "$LT_MOUNTPOINT" ];then
	echo "ERROR: $LT_MOUNTPOINT does not exists"
	exit 1
fi

echo "DEBUG: Generate image"
dd if=/dev/zero of=$LT_IMG bs=4k count=40000 > /dev/null 2>/dev/null
if [ $? -ne 0 ];then
	exit 1
fi

echo 'toto' > ${LT_IMG}.key

VERB='--verbose'

echo "DEBUG: LUKS Format"
cryptsetup luksFormat $VERB -c aes-cbc-plain -h sha1 --key-file=${LT_IMG}.key --batch-mode $LT_IMG
if [ $? -ne 0 ];then
	echo "ERROR: Cannot luksFormat $LT_IMG"
	exit 1
fi

echo "DEBUG: LUKS open"
cryptsetup luksOpen $VERB --key-file=${LT_IMG}.key --batch-mode $LT_IMG $LT_MAPPER
if [ $? -ne 0 ];then
	echo "ERROR: Cannot luksFormat $LT_IMG"
	exit 1
fi

cryptsetup status /dev/mapper/$LT_MAPPER

echo "DEBUG: mkfs"
mkfs.ext4 /dev/mapper/$LT_MAPPER > /dev/null
if [ $? -ne 0 ];then
	exit 1
fi
mount /dev/mapper/$LT_MAPPER $LT_MOUNTPOINT
if [ $? -ne 0 ];then
	exit 1
fi

for numtest in `seq 1 $LT_NUMPASS`
do
#for size in 5 10 50 64 100 128 500 512 1000 4192 8192 16384 32000 64000 131072 262144 524288 1048576
	for size in 5 10 50 64 100 128 500 512 1000 4192 8192 16384 32000 64000 131072 262144 524288 1048576
	do
		dd if=/dev/urandom of=$LT_TEMPDIR/test_${size} bs=1 count=$size > /dev/null 2>/dev/null
		GOOD_SHA1="`sha1sum $LT_TEMPDIR/test_${size} | cut -d\  -f1`"
		cp $LT_TEMPDIR/test_${size} $LT_MOUNTPOINT/test_${size}
		# sync and drop all caches for forcing read from image
		sync
		echo 3 > /proc/sys/vm/drop_caches
		TEST_SHA1="`sha1sum $LT_MOUNTPOINT/test_${size} | cut -d\  -f1`"
		if [ "$GOOD_SHA1" = "$TEST_SHA1" ];then
			#echo "GOOD $numtest $size $GOOD_SHA1 $TEST_SHA1"
			echo -n ""
		else
			echo "BAD $numtest $size $GOOD_SHA1 $TEST_SHA1"
			exit 1
		fi
		rm $LT_TEMPDIR/test_${size}
	#	rm $LT_MOUNTPOINT/test
	done
	echo "END $numtest / $LT_NUMPASS"
done

echo "DEBUG: umount"
umount $LT_MOUNTPOINT

echo "DEBUG: close"
cryptsetup luksClose ctest

rm $LT_IMG
rm ${LT_IMG}.key
